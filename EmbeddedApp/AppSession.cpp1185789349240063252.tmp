#include "AppSession.h"


void AppSession::initializeSessionList(){
   
   _mashStep[0] = new MashStep(45, 20, "ACID REST", TRUE);
   _mashStep[1] = new MashStep(20, 45.0, "PROTEIN REST", FALSE);
   _stepCount = 2; 
}

AppSession::AppSession(AppDisplay *display) {
  _display = display;
  _tempSensor = new TemperatureSensor(TEMP_SENSOR_PIN, TEMP_SENSOR_RES);
  _button = new Button(BUTTON_PIN);
  
}

float AppSession::collectTemp() {
  
  return _tempSensor->getTemperature();

}

void AppSession::collectData() {
 
   _curTemperature = collectTemp();
   if (_sessionState != INITIAL)
     _sessionTimer.update();
   updateState();
}

int AppSession::updateState() {
 
  
  switch(_sessionState)
  {
    case INITIAL:
     processInitialState();
     break;
    case HEATING:
     processHeatingState();
    case RUNNING:
     processRunningState();
     break;
    default:
     break;
  }
}

void AppSession::processInitialState() {
  if (_button->getState() == LOW) {
    startSession(); 
  } 
    
}

void AppSession::startSession() {
  Serial.println("Acionou");
  _sessionTimer.start();
  _sessionState = HEATING;
  initializeSessionList();
  _mashStep[_curStep]->start();
}

void AppSession::processHeatingState() {
  if ((_mashStep[_curStep]->updateState(_curTemperature)) != STEP_INI) {
    _sessionState = RUNNING;
  }
}

void AppSession::processRunningState()
{
   switch(_mashStep[_curStep]->updateState(_curTemperature)) {
     case STEP_RUN:
       break;
     case STEP_DONE:
       break;
     case STEP_WAIT:
       break;
     default:
       break;
   }
}

void AppSession::refreshStatus() {
  String stateLabel[5] = {" INI", "HEAT", " RUN", "WAIT", "DONE"};
  if (_sessionState != INITIAL) {
    _display->printMetrics(_mashStep[_curStep]->getStepName(), _mashStep[_curStep]->getAutoFlag(), _curTemperature, _mashStep[_curStep]->getProgTemp(), _mashStep[_curStep]->getCurTime(), _mashStep[_curStep]->getProgTime(), _sessionTimer.getTimeCount(), stateLabel[_sessionState]); 
  } else {
    _display->startScreen();
  }
}
